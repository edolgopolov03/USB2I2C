C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 1   


C51 COMPILER V9.50a, COMPILATION OF MODULE USB_CDC_UART
OBJECT MODULE PLACED IN USB_CDC_UART.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.exe USB_CDC_UART.c DB OE CD INCDIR(c:\SiLabs\MCU\Inc) COMPACT

line level    source

   1          //-----------------------------------------------------------------------------
   2          // USB_CDC_UART.c
   3          //-----------------------------------------------------------------------------
   4          
   5          //-----------------------------------------------------------------------------
   6          // Includes
   7          //-----------------------------------------------------------------------------
   8          
   9          #include "USB_CDC_Type.h"
  10          #include "USB_CDC_UART.h"
  11          
  12          //-----------------------------------------------------------------------------
  13          // Constant
  14          //-----------------------------------------------------------------------------
  15          
  16          //-----------------------------------------------------------------------------
  17          // Externs
  18          //-----------------------------------------------------------------------------
  19          
  20          extern BYTE cs_Line_State;                                      // serial line state
  21          extern bit cs_Line_State_Update;                        // update line state
  22          
  23          //-----------------------------------------------------------------------------
  24          // Global Variables
  25          //-----------------------------------------------------------------------------
  26          
  27          volatile TLine_Coding idata uart_line_coding = {                // line coding structure and its default value
  28                  115200,         // baudrate
  29                  0,                      // stop bit:    1
  30                  0,                      // parity:              none
  31                  8                       // data bits:   8
  32          };
  33          
  34          volatile bit uart_DTR = FALSE;                          // Line status output
  35          volatile bit uart_RTS = FALSE;
  36          
  37          Ttxbuffer TXBuffer[ TXBUFSIZE ];                        // Ring buffer for TX and RX
  38          Trxbuffer RXBuffer[ RXBUFSIZE ];
  39          Ttxbuffer * TXRDPtr;                                            // pointers for ring buffer
  40          Ttxbuffer * TXWTPtr;
  41          Trxbuffer * RXRDPtr;
  42          Trxbuffer * RXWTPtr;
  43          UINT TXcount;                                                           // number of data to transmit from UART
  44          UINT RXcount;                                                           // number of data to be recieved by host
  45          bit TXReady;                                                            // TX buffer has data to transmit
  46          bit RXReady;                                                            // RX buffer has room
  47          
  48          //-----------------------------------------------------------------------------
  49          // UART Subroutines
  50          //-----------------------------------------------------------------------------
  51          
  52          //-----------------------------------------------------------------------------
  53          // Set_Line_Coding
  54          //-----------------------------------------------------------------------------
  55          //
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 2   

  56          //      Check the line coding setting (baudrate, databits, parity and stop bit)
  57          //      If it is acceptable, copy it to line_coding structure,
  58          //      and set it to the UART, flush the communication buffer
  59          //      Otherwise, return FALSE
  60          //
  61          //      called by USB0 interrupt
  62          //
  63          // Line coding structure
  64          //      0-3 dwDTERate    Data terminal rate (baudrate), in bits per second
  65          //      4   bCharFormat  Stop bits: 0 - 1 Stop bit, 1 - 1.5 Stop bits, 2 - 2 Stop bits
  66          //      5   bParityType  Parity:    0 - None, 1 - Odd, 2 - Even, 3 - Mark, 4 - Space
  67          //      6   bDataBits    Data bits: 5, 6, 7, 8, 16
  68          //-----------------------------------------------------------------------------
  69          
  70          //---------------------------
  71          // SDCC suport
  72          //---------------------------
  73          #if defined SDCC
              #pragma save
              #pragma nooverlay
              #endif // SDCC
  77          
  78          bit Set_Line_Coding( TLine_Coding idata * setting )
  79          {
  80   1              BYTE cnt;
  81   1              BYTE idata * src;
  82   1              BYTE idata * dst;
  83   1      
  84   1              // Check the setting is acceptable or not
  85   1      
  86   1              // Copy setting
  87   1              src = (BYTE idata *)setting;
  88   1              dst = (BYTE idata *)&uart_line_coding;
  89   1              for ( cnt = sizeof(TLine_Coding); cnt > 0; cnt-- )
  90   1                      *dst++ = *src++;
  91   1      
  92   1              // Apply setting to UART
  93   1      
  94   1              // Flush COM buffers
  95   1              Flush_COMbuffers();
  96   1              
  97   1              return TRUE;
  98   1      }
  99          
 100          //---------------------------
 101          // SDCC suport
 102          //---------------------------
 103          #if defined SDCC
              #pragma restore
              #endif // SDCC
 106          
 107          //-----------------------------------------------------------------------------
 108          // Set_Line_State
 109          //-----------------------------------------------------------------------------
 110          //      Set/reset RTS/DTR of UART
 111          //              paramter
 112          //                      bit 1  RTS
 113          //                      bit 0  DTR
 114          //
 115          //      called by USB0 interrupt
 116          //-----------------------------------------------------------------------------
 117          
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 3   

 118          //---------------------------
 119          // SDCC suport
 120          //---------------------------
 121          #if defined SDCC
              #pragma save
              #pragma nooverlay
              #endif // SDCC
 125          
 126          void Set_Line_State( BYTE st )
 127          {
 128   1              uart_DTR = ((st & CDC_DTR) != 0);
 129   1              uart_RTS = ((st & CDC_RTS) != 0);
 130   1      }
 131          
 132          //---------------------------
 133          // SDCC suport
 134          //---------------------------
 135          #if defined SDCC
              #pragma restore
              #endif // SDCC
 138          
 139          //-----------------------------------------------------------------------------
 140          // Update_Line_State
 141          //-----------------------------------------------------------------------------
 142          //  Send line state update to host
 143          //
 144          //  UART State Bitmap
 145          //    7:  (no spec extra) CTS
 146          //    6:  bOverRun    overrun error
 147          //    5:  bParity     parity error
 148          //    4:  bFraming    framing error
 149          //    3:  bRingSignal RI
 150          //    2:  bBreak      break reception
 151          //    1:  bTxCarrier  DSR
 152          //    0:  bRxCarrier  DCD
 153          //-----------------------------------------------------------------------------
 154          
 155          void Update_Line_State( BYTE st )
 156          {
 157   1              EIE1 &= ~0x02;                                  // disable USB interrupt
 158   1              cs_Line_State = st;
 159   1              cs_Line_State_Update = TRUE;
 160   1              EIE1 |= ~0x02;                                  // enable USB interrupt
 161   1      }
 162          
 163          //-----------------------------------------------------------------------------
 164          // Send_Break
 165          //-----------------------------------------------------------------------------
 166          //      Send break from UART TX port, for specified duration.
 167          //              paramter
 168          //              dur: duration to output break (msec)
 169          //                      0x0000: stop break
 170          //                      0xFFFF: send break continuously
 171          //
 172          //      called by USB0 interrupt
 173          //-----------------------------------------------------------------------------
 174          
 175          //---------------------------
 176          // SDCC suport
 177          //---------------------------
 178          #if defined SDCC
              #pragma save
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 4   

              #pragma nooverlay
              #endif // SDCC
 182          
 183          void Send_Break( UINT dur )
 184          {
 185   1              // To do: Send break for 'dur' msec
 186   1      }
*** WARNING C280 IN LINE 183 OF USB_CDC_UART.c: 'dur': unreferenced local variable
 187          
 188          //---------------------------
 189          // SDCC suport
 190          //---------------------------
 191          #if defined SDCC
              #pragma restore
              #endif // SDCC
 194          
 195          //-----------------------------------------------------------------------------
 196          // Flush_COMbuffers, COMGetByte, COMPutByte
 197          //-----------------------------------------------------------------------------
 198          // Ring buffers for TX (host --> UART) and RX (UART --> host) over bulk EP
 199          //
 200          //      Flush_COMbuffers:       initialize COM ring buffer
 201          //      COMGetByte:                     read a byte from COM TX buffer
 202          //      COMPutByte:                     write a byte to COM RX buffer
 203          //-----------------------------------------------------------------------------
 204          
 205          //---------------------------
 206          // SDCC suport
 207          //---------------------------
 208          #if defined SDCC
              #pragma save
              #pragma nooverlay
              #endif // SDCC
 212          
 213          void Flush_COMbuffers( void )
 214          {
 215   1              TXRDPtr = TXBuffer;
 216   1              TXWTPtr = TXBuffer;
 217   1              RXRDPtr = RXBuffer;
 218   1              RXWTPtr = RXBuffer;
 219   1              TXcount = 0;
 220   1              RXcount = 0;
 221   1              TXReady = FALSE;
 222   1              RXReady = TRUE;
 223   1      }
 224          
 225          //---------------------------
 226          // SDCC suport
 227          //---------------------------
 228          #if defined SDCC
              #pragma restore
              #endif // SDCC
 231          
 232          
 233          // TX buffer (host --> UART), UART side
 234          BYTE COMGetByte( void )
 235          {
 236   1              BYTE dt;
 237   1      
 238   1              dt = *TXRDPtr;
 239   1              if ( TXRDPtr == (TXBuffer + (TXBUFSIZE - 1)) )  // at the end of the buffer
 240   1                      TXRDPtr = TXBuffer;                                     // go to the head of the buffer
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 5   

 241   1              else
 242   1                      TXRDPtr++;
 243   1      
 244   1              TXcount--;
 245   1              TXReady = (TXcount != 0);
 246   1      
 247   1              return dt;
 248   1      }
 249          
 250          // RX buffer (UART --> host), UART side
 251          void COMPutByte( BYTE dt )
 252          {
 253   1              *RXWTPtr = dt;
 254   1              if ( RXWTPtr == (RXBuffer + (RXBUFSIZE - 1)) )  // at the end of the buffer
 255   1                      RXWTPtr = RXBuffer;                                     // go to the head of the buffer
 256   1              else
 257   1                      RXWTPtr++;
 258   1      
 259   1              RXcount++;
 260   1              RXReady = (RXcount != RXBUFSIZE);
 261   1      }
 262                  
 263          //-----------------------------------------------------------------------------
 264          // End Of File
 265          //-----------------------------------------------------------------------------
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 6   

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _Set_Line_Coding (BEGIN)
                                           ; SOURCE LINE # 78
;---- Variable 'setting' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 79
                                           ; SOURCE LINE # 87
;---- Variable 'src' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 88
0000 7E00        R     MOV     R6,#LOW uart_line_coding
;---- Variable 'dst' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 89
;---- Variable 'cnt' assigned to Register 'R5' ----
0002 7D07              MOV     R5,#07H
0004         ?C0001:
                                           ; SOURCE LINE # 90
0004 AC07              MOV     R4,AR7
0006 0F                INC     R7
0007 A804              MOV     R0,AR4
0009 E6                MOV     A,@R0
000A AB06              MOV     R3,AR6
000C 0E                INC     R6
000D A803              MOV     R0,AR3
000F F6                MOV     @R0,A
0010 DDF2              DJNZ    R5,?C0001
0012         ?C0002:
                                           ; SOURCE LINE # 95
0012 120000      R     LCALL   Flush_COMbuffers
                                           ; SOURCE LINE # 97
0015 D3                SETB    C
                                           ; SOURCE LINE # 98
0016         ?C0004:
0016 22                RET     
             ; FUNCTION _Set_Line_Coding (END)

             ; FUNCTION _Set_Line_State (BEGIN)
                                           ; SOURCE LINE # 126
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 127
                                           ; SOURCE LINE # 128
0000 EF                MOV     A,R7
0001 30E003            JNB     ACC.0,?C0005
0004 D3                SETB    C
0005 8001              SJMP    ?C0006
0007         ?C0005:
0007 C3                CLR     C
0008         ?C0006:
0008 9200        R     MOV     uart_DTR,C
                                           ; SOURCE LINE # 129
000A EF                MOV     A,R7
000B 30E103            JNB     ACC.1,?C0007
000E D3                SETB    C
000F 8001              SJMP    ?C0008
0011         ?C0007:
0011 C3                CLR     C
0012         ?C0008:
0012 9200        R     MOV     uart_RTS,C
                                           ; SOURCE LINE # 130
0014 22                RET     
             ; FUNCTION _Set_Line_State (END)

C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 7   

             ; FUNCTION _Update_Line_State (BEGIN)
                                           ; SOURCE LINE # 155
;---- Variable 'st' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 156
                                           ; SOURCE LINE # 157
0000 53E6FD            ANL     EIE1,#0FDH
                                           ; SOURCE LINE # 158
0003 7800        E     MOV     R0,#LOW cs_Line_State
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 159
0007 D200        E     SETB    cs_Line_State_Update
                                           ; SOURCE LINE # 160
0009 43E6FD            ORL     EIE1,#0FDH
                                           ; SOURCE LINE # 161
000C 22                RET     
             ; FUNCTION _Update_Line_State (END)

             ; FUNCTION _Send_Break (BEGIN)
                                           ; SOURCE LINE # 183
0000 7800        R     MOV     R0,#LOW dur
0002 EE                MOV     A,R6
0003 F2                MOVX    @R0,A
0004 08                INC     R0
0005 EF                MOV     A,R7
0006 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 184
                                           ; SOURCE LINE # 186
0007 22                RET     
             ; FUNCTION _Send_Break (END)

             ; FUNCTION Flush_COMbuffers (BEGIN)
                                           ; SOURCE LINE # 213
                                           ; SOURCE LINE # 214
                                           ; SOURCE LINE # 215
0000 7E00        R     MOV     R6,#HIGH TXBuffer
0002 7F00        R     MOV     R7,#LOW TXBuffer
0004 7800        R     MOV     R0,#LOW TXRDPtr
0006 EE                MOV     A,R6
0007 F2                MOVX    @R0,A
0008 08                INC     R0
0009 EF                MOV     A,R7
000A F2                MOVX    @R0,A
                                           ; SOURCE LINE # 216
000B 7800        R     MOV     R0,#LOW TXWTPtr
000D EE                MOV     A,R6
000E F2                MOVX    @R0,A
000F 08                INC     R0
0010 EF                MOV     A,R7
0011 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 217
0012 7E00        R     MOV     R6,#HIGH RXBuffer
0014 7F00        R     MOV     R7,#LOW RXBuffer
0016 7800        R     MOV     R0,#LOW RXRDPtr
0018 EE                MOV     A,R6
0019 F2                MOVX    @R0,A
001A 08                INC     R0
001B EF                MOV     A,R7
001C F2                MOVX    @R0,A
                                           ; SOURCE LINE # 218
001D 7800        R     MOV     R0,#LOW RXWTPtr
001F EE                MOV     A,R6
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 8   

0020 F2                MOVX    @R0,A
0021 08                INC     R0
0022 EF                MOV     A,R7
0023 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 219
0024 E4                CLR     A
0025 7800        R     MOV     R0,#LOW TXcount
0027 F2                MOVX    @R0,A
0028 08                INC     R0
0029 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 220
002A 7800        R     MOV     R0,#LOW RXcount
002C F2                MOVX    @R0,A
002D 08                INC     R0
002E F2                MOVX    @R0,A
                                           ; SOURCE LINE # 221
002F C200        R     CLR     TXReady
                                           ; SOURCE LINE # 222
0031 D200        R     SETB    RXReady
                                           ; SOURCE LINE # 223
0033 22                RET     
             ; FUNCTION Flush_COMbuffers (END)

             ; FUNCTION COMGetByte (BEGIN)
                                           ; SOURCE LINE # 234
                                           ; SOURCE LINE # 235
                                           ; SOURCE LINE # 238
0000 7800        R     MOV     R0,#LOW TXRDPtr
0002 E2                MOVX    A,@R0
0003 FE                MOV     R6,A
0004 08                INC     R0
0005 E2                MOVX    A,@R0
0006 F582              MOV     DPL,A
0008 8E83              MOV     DPH,R6
000A E0                MOVX    A,@DPTR
000B FF                MOV     R7,A
;---- Variable 'dt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 239
000C E2                MOVX    A,@R0
000D B4000E      R     CJNE    A,#LOW TXBuffer+04FH,?C0013
0010 18                DEC     R0
0011 E2                MOVX    A,@R0
0012 B40009      R     CJNE    A,#HIGH TXBuffer+04FH,?C0013
                                           ; SOURCE LINE # 240
0015 7400        R     MOV     A,#HIGH TXBuffer
0017 F2                MOVX    @R0,A
0018 08                INC     R0
0019 7400        R     MOV     A,#LOW TXBuffer
001B F2                MOVX    @R0,A
001C 800B              SJMP    ?C0014
001E         ?C0013:
                                           ; SOURCE LINE # 242
001E 7800        R     MOV     R0,#LOW TXRDPtr+01H
0020 E2                MOVX    A,@R0
0021 2401              ADD     A,#01H
0023 F2                MOVX    @R0,A
0024 18                DEC     R0
0025 E2                MOVX    A,@R0
0026 3400              ADDC    A,#00H
0028 F2                MOVX    @R0,A
0029         ?C0014:
                                           ; SOURCE LINE # 244
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 9   

0029 7800        R     MOV     R0,#LOW TXcount+01H
002B E2                MOVX    A,@R0
002C 24FF              ADD     A,#0FFH
002E F2                MOVX    @R0,A
002F 18                DEC     R0
0030 E2                MOVX    A,@R0
0031 34FF              ADDC    A,#0FFH
0033 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 245
0034 08                INC     R0
0035 E2                MOVX    A,@R0
0036 7002              JNZ     ?C0024
0038 18                DEC     R0
0039 E2                MOVX    A,@R0
003A         ?C0024:
003A 6003              JZ      ?C0015
003C D3                SETB    C
003D 8001              SJMP    ?C0016
003F         ?C0015:
003F C3                CLR     C
0040         ?C0016:
0040 9200        R     MOV     TXReady,C
                                           ; SOURCE LINE # 247
                                           ; SOURCE LINE # 248
0042         ?C0017:
0042 22                RET     
             ; FUNCTION COMGetByte (END)

             ; FUNCTION _COMPutByte (BEGIN)
                                           ; SOURCE LINE # 251
;---- Variable 'dt' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0000 7800        R     MOV     R0,#LOW RXWTPtr
0002 E2                MOVX    A,@R0
0003 FC                MOV     R4,A
0004 08                INC     R0
0005 E2                MOVX    A,@R0
0006 FD                MOV     R5,A
0007 F582              MOV     DPL,A
0009 8C83              MOV     DPH,R4
000B EF                MOV     A,R7
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 254
000D ED                MOV     A,R5
000E B4000E      R     CJNE    A,#LOW RXBuffer+04FH,?C0018
0011 EC                MOV     A,R4
0012 B4000A      R     CJNE    A,#HIGH RXBuffer+04FH,?C0018
                                           ; SOURCE LINE # 255
0015 18                DEC     R0
0016 7400        R     MOV     A,#HIGH RXBuffer
0018 F2                MOVX    @R0,A
0019 08                INC     R0
001A 7400        R     MOV     A,#LOW RXBuffer
001C F2                MOVX    @R0,A
001D 800B              SJMP    ?C0019
001F         ?C0018:
                                           ; SOURCE LINE # 257
001F 7800        R     MOV     R0,#LOW RXWTPtr+01H
0021 E2                MOVX    A,@R0
0022 2401              ADD     A,#01H
0024 F2                MOVX    @R0,A
C51 COMPILER V9.50a   USB_CDC_UART                                                         05/17/2022 15:14:56 PAGE 10  

0025 18                DEC     R0
0026 E2                MOVX    A,@R0
0027 3400              ADDC    A,#00H
0029 F2                MOVX    @R0,A
002A         ?C0019:
                                           ; SOURCE LINE # 259
002A 7800        R     MOV     R0,#LOW RXcount+01H
002C E2                MOVX    A,@R0
002D 2401              ADD     A,#01H
002F F2                MOVX    @R0,A
0030 18                DEC     R0
0031 E2                MOVX    A,@R0
0032 3400              ADDC    A,#00H
0034 F2                MOVX    @R0,A
                                           ; SOURCE LINE # 260
0035 08                INC     R0
0036 E2                MOVX    A,@R0
0037 6450              XRL     A,#050H
0039 7002              JNZ     ?C0026
003B 18                DEC     R0
003C E2                MOVX    A,@R0
003D         ?C0026:
003D 6003              JZ      ?C0020
003F D3                SETB    C
0040 8001              SJMP    ?C0021
0042         ?C0020:
0042 C3                CLR     C
0043         ?C0021:
0043 9200        R     MOV     RXReady,C
                                           ; SOURCE LINE # 261
0045 22                RET     
             ; FUNCTION _COMPutByte (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    254    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    160    ----
   PDATA SIZE       =     12       2
   DATA SIZE        =   ----    ----
   IDATA SIZE       =      7    ----
   BIT SIZE         =      4    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
