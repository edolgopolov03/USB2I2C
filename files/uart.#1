//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <stdio.h>
#include <c8051F340.h>
#include "USB_Main.h"
#include "uart.h"
#include "spi.h"
#include "extsram.h"

sfr16 TMR2RL	= 0xca;					// Timer2 reload value
sfr16 TMR2		= 0xcc;					// Timer2 counter

unsigned char num_sended = 0;
unsigned char num_recv = 0;
unsigned char i_flag = 0;
unsigned char end_int = 0;
unsigned char inside_interrupt = 1;
unsigned char wait_ov = 0;
unsigned char byte_ov = 0;
unsigned char TIMEOUT_WAIT = 10; // in 10*ms
unsigned char TIMEOUT_BYTE = 11; // in 100*mks
long rat_wait = SYSCLK / 12 / 100;
long rat_byte = SYSCLK / 12 / 10000;
long wait_time = 10L;					// in 10*ms
long byte_time = 11;					// in 100*mks; max = 16 ms;


//-----------------------------------------------------------------------------
void UART0_Init(int baud)
{
  SCON0 = 0x10;                        // 8-bit variable bit rate and RX enabled
  if (SYSCLK/baud/2/256 < 1)
  {
    TH1    = -(SYSCLK/baud/2);
    CKCON |= 0x08;                     // Timer1 uses SYSCLK
  } 
  else if (SYSCLK/baud/2/256 < 4)
  {
    TH1    = -(SYSCLK/baud/2/4);
    CKCON &= 0xF0;                     // Timer1 uses SYSCLK/4
    CKCON |= 0x01;
  }
  else if (SYSCLK/baud/2/256 < 12)
  {
    TH1    = -(SYSCLK/baud/2/12);
    CKCON &= 0xF0;                     // Timer1 uses SYSCLK/12
  }
  else
  {
    TH1    = -(SYSCLK/baud/2/48);
    CKCON &= 0xF0;                     // Timer1 uses SYSCLK/48
    CKCON |= 0x03;
  }
  TL1   = 0xFF;                        // set Timer1 to overflow immediately
  TMOD &= 0x0F;                        // Timer1 in 8-bit autoreload
  TMOD |= 0x20;
  TR1   = 1;                           // start Timer1
  TI0   = 1;                           // indicate TX0 ready

  //InitVolkov(0);
  ES0   = 1;                           // Enable UART0 interrupt
}

void UART1_Init(int baud)
{	
										// SYSCLK = 48 MHz
  SCON1 = 0x10;							// TX and RX enabled
  SMOD1 = 0x0c;							// Data length - 8 bits
  SBCON1 &= 0xBC;						// RESERVED
  SBCON1 |= 0x43;						// Baudrate generator is enabled Prescaler 0x03 = 1
  SBRLH1 = (-SYSCLK/2/baud)>>8;		// High byte of BAUDRATE
  SBRLL1 = (-SYSCLK/2/baud);		// Low byte of BAUDRATE
  EIE2 |= 0x02;							// Enable UART1 interrupt
}

void INT0_Init(void)
{	
	EX0 = 0x01;					// Enable INT0 interrupt
	IT0 = 1;
	IT01CF = 0x0E;				// Configuration of ExtInt
}

void Change_baud(void)
{
	UART0_Init((short)(extmas[OUT_PACKAGE]<<8)|(short)extmas[OUT_PACKAGE+1]);
	UART1_Init((short)(extmas[OUT_PACKAGE]<<8)|(short)extmas[OUT_PACKAGE+1]);
	Finish_int();

}

void Change_TIMEOUT(void)
{
	TIMEOUT_WAIT = extmas[OUT_PACKAGE];
	TIMEOUT_BYTE = extmas[OUT_PACKAGE+1];
	Finish_int();
}

//-----------------------------------------------------------------------------
// UART0_ISR: UART Interrupt Service Routine
//-----------------------------------------------------------------------------

void UART0_ISR(void) interrupt INTERRUPT_UART0   
{
	if(RI0)
    {
		if ((inside_interrupt)&&(IN_PACKAGE + extmas[NUM_RECV]<256))
		{
			extmas[IN_PACKAGE + extmas[NUM_RECV]] = SBUF0;
			extmas[NUM_RECV]++;
			Byte_Set();//TMR2 = 0xffff - (extmas[TIMEOUT_BYTE] * rat_byte);
        }
		RI0 = 0;
    }
	if(TI0)
	{
		if (inside_interrupt)
		{
			if (num_sended<extmas[NUM_SEND])
			{
				SBUF0 = extmas[OUT_PACKAGE+num_sended];
				num_sended++;
				Byte_Set();
			}
			else {
				extmas[NUM_RECV] = 0;
				is_read = 1;
				Wait_Set();
			}
		}
		TI0 = 0;
	}
}

//-----------------------------------------------------------------------------
// UART1_ISR: UART Interrupt Service Routine
//-----------------------------------------------------------------------------

void UART1_ISR(void) interrupt INTERRUPT_UART1   
{   
    if((SCON1 & 1) == 1)
    {
		if ((inside_interrupt)&&(IN_PACKAGE + extmas[NUM_RECV]<256))
		{
			extmas[IN_PACKAGE + extmas[NUM_RECV]] = SBUF1;
			extmas[NUM_RECV]++;
			Byte_Set();
        }
		SCON1 &= ~0x01;
    }
	if((SCON1 & 2) == 2)
	{
		if (inside_interrupt)
		{
			if (num_sended<extmas[NUM_SEND])
			{
				SBUF1 = extmas[OUT_PACKAGE+num_sended];
				num_sended++;
				Byte_Set();
			}
			else {
				extmas[NUM_RECV] = 0;
				DE1 = 0;
				RE1 = 0;
				Wait_Set();
			}
		}
		SCON1 &= ~2;
	}
}

void INT0_ISR(void) interrupt INTERRUPT_INT0
{
	inside_interrupt = 1;
	i_flag = 1;
	end_int = 0;
	if (extmas[TYPE_COM] == 1)
	{
		num_sended = 0;
		/*ttimes = 0;							// number of overflows timer2
		TMR2 = 0xffff - (extmas[TIMEOUT_BYTE] * rat_byte);*/
		Byte_Set();
		if (extmas[N_UART] == 1) 
		{
			DE1 = 1;						// 1 writing if both then echo
			RE1 = 1;						// 0 reading if both then echo
			SCON1 |= 2;
		} else if (extmas[N_UART] == 0)
		{	
			DE0 = 1;						// 1 writing if both then echo
			RE0 = 1;						// 0 reading if both then echo
			TI0 = 1;
		}
	} else if (extmas[TYPE_COM] == 2)	Change_baud(); 
	  else if (extmas[TYPE_COM] == 3)	Change_TIMEOUT();
}

//-----------------------------------------------------------------------------
// Timer_Init
//-----------------------------------------------------------------------------
void Timer_Init(void)
{
	TMR2CN	 = 0x00;					// Stop Timer2; Clear TF2;

	CKCON	&= ~0xF0;					// Timer2 clocked based on T2XCLK;
	TMR2RL	 = 0;						// Initialize reload value
	TMR2	 = 0xffff;					// Set to reload immediately
	TR2		 = 1;						// Start Timer2
}


//-----------------------------------------------------------------------------
// Timer_Set
//-----------------------------------------------------------------------------
void Wait_Set(void)
{
	wait_time = TIMEOUT_WAIT;
	TMR2 = 0xFFFF - (wait_time * rat_wait);
	wait_ov = ((wait_time * rat_wait)/0xFFFF);
}

void Byte_Set(void)
{
	byte_time = TIMEOUT_BYTE;
	TMR2 = 0xFFFF - (byte_time * rat_byte);
	byte_ov = ((byte_time * rat_byte)/0xFFFF);
}

//-----------------------------------------------------------------------------
// Timer2_ISR
//-----------------------------------------------------------------------------

void Timer2_ISR(void) interrupt 5
{
	TF2H = 0;							// Clear Timer2 interrupt flag
	if (inside_interrupt)
	{
		if (wait_ov > 0)		wait_ov--;					// if wait_time more than maximum overflow time
		else if (byte_ov > 0)	byte_ov--;
		else
		{
			if (extmas[N_UART] == 1) 
			{
				DE1 = 1;						// 1 writing if both then echo
				RE1 = 1;						// 0 reading if both then echo
			} else if (extmas[N_UART] == 0)
			{	
				DE0 = 1;						// 1 writing if both then echo
				RE0 = 1;						// 0 reading if both then echo
			}
			Finish_int();
		}
	}
}

void Finish_int(void)
{
			inside_interrupt = 0;
			end_int = 1;	
}